#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Board Games Monitor
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Bash 4+, Docker, Docker Compose, Git

set -e

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
INSTALL_DIR="${1:-$HOME/board-games-monitor}"
GIT_REPO="${2:-https://github.com/your-username/board-games-monitor.git}"
SKIP_DOCKER_CHECK="${3:-false}"
SKIP_ENV_FILE="${4:-false}"
DEV_MODE="${5:-false}"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${CYAN}üé≤ Board Games Monitor - –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è${NC}"
    echo -e "${CYAN}===========================================${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    if [ "$SKIP_DOCKER_CHECK" = "false" ]; then
        print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."

        if ! command -v docker &> /dev/null; then
            print_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker"
            print_info "   Ubuntu/Debian: sudo apt install docker.io docker-compose"
            print_info "   CentOS/RHEL: sudo yum install docker docker-compose"
            print_info "   macOS: –°–∫–∞—á–∞–π—Ç–µ —Å https://www.docker.com/products/docker-desktop"
            exit 1
        fi
        print_success "Docker –Ω–∞–π–¥–µ–Ω"

        if ! command -v docker-compose &> /dev/null; then
            print_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
        fi
        print_success "Docker Compose –Ω–∞–π–¥–µ–Ω"
    fi

    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git"
        print_info "   Ubuntu/Debian: sudo apt install git"
        print_info "   CentOS/RHEL: sudo yum install git"
        exit 1
    fi
    print_success "Git –Ω–∞–π–¥–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
create_install_dir() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $INSTALL_DIR"

    if [ -d "$INSTALL_DIR" ]; then
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf "$INSTALL_DIR"/*
        else
            print_error "–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
            exit 1
        fi
    else
        mkdir -p "$INSTALL_DIR"
    fi

    cd "$INSTALL_DIR"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    print_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

    if ! git clone "$GIT_REPO" . 2>/dev/null; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
        print_info "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        exit 1
    fi

    print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    if [ "$SKIP_ENV_FILE" = "false" ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .env..."

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        SECRET_KEY=$(openssl rand -hex 32 2>/dev/null || echo "change-this-secret-key-in-production-$(date +%s)")

        cat > .env << EOF
# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TZ=Europe/Moscow

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=postgresql+psycopg2://app:app@postgres:5432/app

# Redis
REDIS_URL=redis://redis:6379/0

# MinIO S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
S3_ENDPOINT=http://minio:9000
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin
S3_BUCKET=raw
S3_SECURE=false

# Ollama (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# OLLAMA_URL=http://host.docker.internal:11434

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SECRET_KEY=$SECRET_KEY
CORS_ORIGINS=http://localhost,http://localhost:3000

# Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# TELEGRAM_BOT_TOKEN=your_bot_token_here
# TELEGRAM_CHAT_ID=your_chat_id_here

# Web Push
VAPID_PUBLIC_KEY=your_vapid_public_key
VAPID_PRIVATE_KEY=your_vapid_private_key
VAPID_EMAIL=your_email@example.com

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_DAILY_PAGES=1000
DEFAULT_RPS=0.3
DEFAULT_BURST=1

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO
EOF

        print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
        print_warning "   –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."

    for dir in backups agents logs; do
        mkdir -p "$dir"
    done
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
build_and_start() {
    print_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."

    if ! docker-compose build; then
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–æ–≤"
        exit 1
    fi

    print_success "Docker –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"

    print_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

    if ! docker-compose up -d; then
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        exit 1
    fi

    print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_services() {
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30

    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose ps
}

# –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
migrate_database() {
    print_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API
    for i in {1..30}; do
        if docker-compose exec -T api python -c "import app.core.database; print('OK')" 2>/dev/null; then
            break
        fi
        sleep 2
    done

    if docker-compose exec -T api alembic upgrade head 2>/dev/null; then
        print_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
    else
        print_warning "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
create_manage_script() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."

    cat > manage.sh << 'EOF'
#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Board Games Monitor
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./manage.sh [start|stop|restart|logs|status|update|backup]

ACTION="${1:-status}"

print_info() {
    echo -e "\033[0;34m‚ÑπÔ∏è  $1\033[0m"
}

print_success() {
    echo -e "\033[0;32m‚úÖ $1\033[0m"
}

print_warning() {
    echo -e "\033[1;33m‚ö†Ô∏è  $1\033[0m"
}

echo "üé≤ Board Games Monitor Manager"

case $ACTION in
    "start")
        print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose up -d
        ;;
    "stop")
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose down
        ;;
    "restart")
        print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose restart
        ;;
    "logs")
        print_info "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose logs -f
        ;;
    "status")
        print_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker-compose ps
        ;;
    "update")
        print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
        git pull
        docker-compose build
        docker-compose up -d
        ;;
    "backup")
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
        TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
        BACKUP_FILE="backups/backup_${TIMESTAMP}.zip"

        # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        docker-compose exec -T postgres pg_dump -U app app > "backups/db_${TIMESTAMP}.sql"

        # –ê—Ä—Ö–∏–≤–∞—Ü–∏—è
        zip -r "$BACKUP_FILE" "backups/db_${TIMESTAMP}.sql"
        rm "backups/db_${TIMESTAMP}.sql"

        print_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $BACKUP_FILE"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [start|stop|restart|logs|status|update|backup]"
        exit 1
        ;;
esac

print_success "–ì–æ—Ç–æ–≤–æ!"
EOF

    chmod +x manage.sh
    print_success "–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω"
}

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
print_completion_info() {
    echo
    print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo "================================"
    echo -e "${CYAN}üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost${NC}"
    echo -e "${CYAN}üîß API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost/api${NC}"
    echo -e "${CYAN}üìä –ú–∏–ΩIO –∫–æ–Ω—Å–æ–ª—å: http://localhost:9001 (minioadmin/minioadmin)${NC}"
    echo
    echo -e "${YELLOW}üìú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:${NC}"
    echo -e "   ./manage.sh start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "   ./manage.sh stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "   ./manage.sh restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "   ./manage.sh logs     - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
    echo -e "   ./manage.sh status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo -e "   ./manage.sh update   - –û–±–Ω–æ–≤–∏—Ç—å"
    echo -e "   ./manage.sh backup   - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø"
    echo
    echo -e "${CYAN}üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/your-username/board-games-monitor${NC}"
    echo

    if [ "$DEV_MODE" = "true" ]; then
        print_warning "üõ†Ô∏è  –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"
        echo -e "   API: http://localhost:8000/docs"
        echo -e "   Frontend: http://localhost:3000"
        echo
    fi

    print_success "‚ú® –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    print_header

    check_dependencies
    create_install_dir
    clone_repository
    create_env_file
    create_directories
    build_and_start
    wait_for_services
    migrate_database
    create_manage_script
    print_completion_info
}

# –ó–∞–ø—É—Å–∫
main "$@"