"""Тесты для встроенных агентов"""
import pytest
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime
import asyncio

# Импортируем всех встроенных агентов
from app.agents.builtin.hobbygames import HobbyGamesComingSoonAgent, HobbyGamesCatalogNewAgent
from app.agents.builtin.lavkaigr import LavkaIgrShopAgent
from app.agents.builtin.nastolio import NastolioAgent
from app.agents.builtin.evrikus import EvrikusAgent
from app.agents.builtin.crowdgames import CrowdGamesAgent
from app.agents.builtin.gaga import GagaAgent
from app.agents.builtin.zvezda import ZvezdaAgent
from app.agents.builtin.choochoogames import ChooChooGamesAgent
from app.agents.builtin.hobbygames_headless import HobbyGamesHeadlessAgent

from app.agents.base import Fetched, ListingEventDraft


class TestHobbyGamesComingSoonAgent:
    """Тесты агента Hobby Games Coming Soon"""

    @pytest.fixture
    def agent(self):
        """Фикстура агента"""
        return HobbyGamesComingSoonAgent()

    @pytest.fixture
    def sample_html(self):
        """Пример HTML страницы Hobby Games"""
        return """
        <html>
            <body>
                <div class="product-item">
                    <h3 class="title">Громкое дело</h3>
                    <div class="price">2999 руб.</div>
                    <div class="availability">В наличии</div>
                    <a href="https://hobbygames.ru/product/123" class="link">Подробнее</a>
                </div>
                <div class="product-item">
                    <h3 class="title">Колонизаторы</h3>
                    <div class="price">4500 руб.</div>
                    <div class="availability">Предзаказ</div>
                    <a href="https://hobbygames.ru/product/456" class="link">Подробнее</a>
                </div>
            </body>
        </html>
        """

    @pytest.mark.asyncio
    async def test_parse_coming_soon(self, agent, sample_html):
        """Тест парсинга раздела Coming Soon"""
        fetched = Fetched(
            url="https://hobbygames.ru/coming-soon",
            status=200,
            body=sample_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 2
        assert events[0].title == "Громкое дело"
        assert events[0].price == 2999.99
        assert events[0].url == "https://hobbygames.ru/product/123"
        assert events[1].title == "Колонизаторы"
        assert events[1].kind == "preorder"

    def test_extract_price_valid(self, agent):
        """Тест извлечения цены с валидным значением"""
        price = agent._extract_price("2999 руб.")
        assert price == 2999.99

        price = agent._extract_price("4 500,50 руб.")
        assert price == 4500.50

        price = agent._extract_price("Цена: 2 999р")
        assert price == 2999.00

    def test_extract_price_invalid(self, agent):
        """Тест извлечения цены с невалидным значением"""
        price = agent._extract_price("нет в наличии")
        assert price is None

        price = agent._extract_price("")
        assert price is None

        price = agent._extract_price("бесценно")
        assert price is None

    def test_determine_event_kind_release(self, agent):
        """Тест определения типа события - релиз"""
        kind = agent._determine_event_kind("В наличии")
        assert kind == "release"

        kind = agent._determine_event_kind("Доступно для заказа")
        assert kind == "release"

    def test_determine_event_kind_preorder(self, agent):
        """Тест определения типа события - предзаказ"""
        kind = agent._determine_event_kind("Предзаказ")
        assert kind == "preorder"

        kind = agent._determine_event_kind("Скоро в продаже")
        assert kind == "preorder"

    def test_determine_event_kind_sale(self, agent):
        """Тест определения типа события - скидка"""
        kind = agent._determine_event_kind("Распродажа")
        assert kind == "sale"

        kind = agent._determine_event_kind("Скидка 30%")
        assert kind == "sale"

    def test_normalize_url(self, agent):
        """Тест нормализации URL"""
        url = agent._normalize_url("/product/123")
        assert url == "https://hobbygames.ru/product/123"

        url = agent._normalize_url("https://hobbygames.ru/product/123")
        assert url == "https://hobbygames.ru/product/123"

    def test_normalize_title(self, agent):
        """Тест нормализации названия"""
        title = agent._normalize_title("Настольная игра 'Громкое дело'")
        assert title == "Громкое дело"

        title = agent._normalize_title("Колонизаторы (настольная игра)")
        assert title == "Колонизаторы"


class TestLavkaIgrShopAgent:
    """Тесты агента Лавка Игр"""

    @pytest.fixture
    def agent(self):
        return LavkaIgrShopAgent()

    @pytest.fixture
    def sample_html(self):
        """Пример HTML страницы Лавка Игр"""
        return """
        <html>
            <body>
                <div class="product-card">
                    <h2 class="product-title">Мачь Корона</h2>
                    <div class="product-price">3 200 ₽</div>
                    <div class="product-status">есть в наличии</div>
                    <a href="/shop/mach-corona" class="product-link">Купить</a>
                </div>
            </body>
        </html>
        """

    @pytest.mark.asyncio
    async def test_parse_shop_section(self, agent, sample_html):
        """Тест парсинга раздела Магазин"""
        fetched = Fetched(
            url="https://lavkaigr.ru/shop",
            status=200,
            body=sample_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 1
        assert events[0].title == "Мачь Корона"
        assert events[0].price == 3200.00


class TestNastolioAgent:
    """Тесты агента Nastol.io"""

    @pytest.fixture
    def agent(self):
        return NastolioAgent()

    @pytest.fixture
    def sample_html(self):
        """Пример HTML страницы Nastol.io"""
        return """
        <html>
            <body>
                <article class="news-item">
                    <h1>Новый выпуск: Поле чудес настольная игра</h1>
                    <div class="price">1 990 руб.</div>
                    <a href="/news/pole-chudes" class="read-more">Читать далее</a>
                </article>
            </body>
        </html>
        """

    @pytest.mark.asyncio
    async def test_parse_publications(self, agent, sample_html):
        """Тест парсинга публикаций"""
        fetched = Fetched(
            url="https://nastol.io/news",
            status=200,
            body=sample_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 1
        assert "Поле чудес" in events[0].title
        assert events[0].price == 1990.00


class TestEvrikusAgent:
    """Тесты агента Evrikus"""

    @pytest.fixture
    def agent(self):
        return EvrikusAgent()

    @pytest.fixture
    def sample_html(self):
        """Пример HTML страницы Evrikus"""
        return """
        <html>
            <body>
                <div class="catalog-item">
                    <h3 class="item-name">Эврикиада</h3>
                    <span class="item-price">2 500р</span>
                    <a href="/catalog/evrikada" class="item-link">Подробнее</a>
                </div>
            </body>
        </html>
        """

    @pytest.mark.asyncio
    async def test_parse_catalog(self, agent, sample_html):
        """Тест парсинга каталога"""
        fetched = Fetched(
            url="https://evrikus.ru/catalog",
            status=200,
            body=sample_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 1
        assert events[0].title == "Эврикиада"
        assert events[0].price == 2500.00


class TestCrowdGamesAgent:
    """Тесты агента Crowd Games"""

    @pytest.fixture
    def agent(self):
        return CrowdGamesAgent()

    @pytest.fixture
    def sample_html(self):
        """Пример HTML страницы Crowd Games"""
        return """
        <html>
            <body>
                <div class="collection-item">
                    <h4>Квест Империя</h4>
                    <div class="price-tag">3 750 ₽</div>
                    <a href="/collection/quest-empire">Смотреть</a>
                </div>
            </body>
        </html>
        """

    @pytest.mark.asyncio
    async def test_parse_collection(self, agent, sample_html):
        """Тест парсинга коллекции"""
        fetched = Fetched(
            url="https://crowdgames.ru/collection",
            status=200,
            body=sample_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 1
        assert events[0].title == "Квест Империя"
        assert events[0].price == 3750.00


class TestGagaAgent:
    """Тесты агента Gaga"""

    @pytest.fixture
    def agent(self):
        return GagaAgent()

    @pytest.fixture
    def sample_html(self):
        """Пример HTML страницы Gaga"""
        return """
        <html>
            <body>
                <div class="game-card">
                    <h5 class="game-title">Имаджинариум</h5>
                    <span class="cost">2 100 руб.</span>
                    <a href="/games/imaginariym" class="details">Подробнее</a>
                </div>
            </body>
        </html>
        """

    @pytest.mark.asyncio
    async def test_parse_games(self, agent, sample_html):
        """Тест парсинга игр"""
        fetched = Fetched(
            url="https://gaga-shop.ru/games",
            status=200,
            body=sample_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 1
        assert events[0].title == "Имаджинариум"
        assert events[0].price == 2100.00


class TestZvezdaAgent:
    """Тесты агента Звезда"""

    @pytest.fixture
    def agent(self):
        return ZvezdaAgent()

    @pytest.fixture
    def sample_html(self):
        """Пример HTML страницы Звезда"""
        return """
        <html>
            <body>
                <div class="boardgame-item">
                    <h3 class="item-title">Танчики</h3>
                    <div class="price-value">1 800 ₽</div>
                    <a href="/boardgames/tanki" class="item-href">Купить</a>
                </div>
            </body>
        </html>
        """

    @pytest.mark.asyncio
    async def test_parse_boardgames(self, agent, sample_html):
        """Тест парсинга настольных игр"""
        fetched = Fetched(
            url="https://zvezda.ru/boardgames",
            status=200,
            body=sample_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 1
        assert events[0].title == "Танчики"
        assert events[0].price == 1800.00


class TestChooChooGamesAgent:
    """Тесты агента ChooChoo Games"""

    @pytest.fixture
    def agent(self):
        return ChooChooGamesAgent()

    @pytest.fixture
    def sample_html(self):
        """Пример HTML страницы ChooChoo Games"""
        return """
        <html>
            <body>
                <div class="product-wrapper">
                    <h2 class="product-name">Ticket to Ride</h2>
                    <span class="product-cost">3 200р</span>
                    <a href="/store/ticket-to-ride" class="product-url">В корзину</a>
                </div>
            </body>
        </html>
        """

    @pytest.mark.asyncio
    async def test_parse_store(self, agent, sample_html):
        """Тест парсинга магазина"""
        fetched = Fetched(
            url="https://choochoogames.ru/store",
            status=200,
            body=sample_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 1
        assert events[0].title == "Ticket to Ride"
        assert events[0].price == 3200.00


class TestHobbyGamesHeadlessAgent:
    """Тесты headless агента Hobby Games"""

    @pytest.fixture
    def agent(self):
        return HobbyGamesHeadlessAgent()

    @pytest.mark.asyncio
    async def test_dynamic_content_parsing(self, agent):
        """Тест парсинга динамического контента"""
        dynamic_html = """
        <html>
            <body>
                <div class="dynamic-product">
                    <h3 class="title">Динамическая игра</h3>
                    <div class="price">5 000 руб.</div>
                    <button onclick="addToCart(123)">В корзину</button>
                </div>
            </body>
        </html>
        """

        fetched = Fetched(
            url="https://hobbygames.ru/dynamic-page",
            status=200,
            body=dynamic_html,
            headers={},
            fetched_at=datetime.utcnow()
        )

        events = []
        async for event in agent.parse(fetched):
            events.append(event)

        assert len(events) == 1
        assert events[0].title == "Динамическая игра"
        assert events[0].price == 5000.00

    def test_requires_javascript_execution(self, agent):
        """Тест проверки необходимости выполнения JavaScript"""
        assert agent.requires_javascript is True