#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ollama."""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±—ç–∫–µ–Ω–¥—É
sys.path.append('/mnt/c/Projects/BGW/backend')

from app.services.llm_service import llm_service


async def test_llm_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama...")

    available = await llm_service.is_available()
    url = llm_service.base_url

    print(f"URL: {url}")
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")

    if not available:
        return False

    return True


async def test_available_models():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...")

    try:
        models = await llm_service.get_available_models()
        current_model = llm_service.model

        print(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ({len(models)}):")
        for model in models:
            status = "üî∏" if model == current_model else "  "
            print(f"{status} {model}")

        return models
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return []


async def test_extract_game_info():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ."""
    print("\nüéÆ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ...")

    test_text = """
    üî• –ì—Ä–æ–º–∫–æ–µ –¥–µ–ª–æ - –ù–æ–≤–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ —É–∂–µ –≤ –ø—Ä–æ–¥–∞–∂–µ!

    –¶–µ–Ω–∞: 2 500 ‚ÇΩ
    –°–∫–∏–¥–∫–∞ 20% –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏!

    –ò–∑–¥–∞—Ç–µ–ª—å: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–≥—Ä—ã
    –í –Ω–∞–ª–∏—á–∏–∏: ‚úÖ
    """

    try:
        result = await llm_service.extract_game_info(test_text)
        if result:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            for key, value in result.items():
                print(f"  {key}: {value}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_normalize_title():
    """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π."""
    print("\nüìù –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π...")

    test_titles = [
        "–ì—Ä–æ–º–∫–æ–µ –¥–µ–ª–æ. –ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞",
        "Dune: Imperium ‚Äì –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞",
        "–ú–æ–Ω–æ–ø–æ–ª–∏—è. –ù–æ–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ 2024"
    ]

    success_count = 0
    for title in test_titles:
        try:
            result = await llm_service.normalize_game_title(title)
            if result:
                print(f"‚úÖ '{title}' -> '{result}'")
                success_count += 1
            else:
                print(f"‚ùå '{title}' -> [–Ω–µ —É–¥–∞–ª–æ—Å—å]")
        except Exception as e:
            print(f"‚ùå '{title}' -> –æ—à–∏–±–∫–∞: {e}")

    return success_count == len(test_titles)


async def test_categorize_event():
    """–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π."""
    print("\nüè∑Ô∏è –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π...")

    test_events = [
        ("üéâ –ê–Ω–æ–Ω—Å: –ì—Ä–æ–º–∫–æ–µ –¥–µ–ª–æ 2", ""),
        ("üì¶ –û—Ç–∫—Ä—ã—Ç—ã –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã –Ω–∞ Dune: Imperium", ""),
        ("üöÄ –í –ø—Ä–æ–¥–∞–∂–µ: –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –æ—Ç Cosmic Games", ""),
        ("üí∞ –°–∫–∏–¥–∫–∞ 30% –Ω–∞ –≤—Å–µ –∏–≥—Ä—ã!", "")
    ]

    success_count = 0
    for title, description in test_events:
        try:
            result = await llm_service.categorize_event(title, description)
            if result:
                print(f"‚úÖ '{title}' -> {result}")
                success_count += 1
            else:
                print(f"‚ùå '{title}' -> [–Ω–µ —É–¥–∞–ª–æ—Å—å]")
        except Exception as e:
            print(f"‚ùå '{title}' -> –æ—à–∏–±–∫–∞: {e}")

    return success_count == len(test_events)


async def test_suggest_synonyms():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤."""
    print("\nüîÑ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤...")

    test_title = "–ì—Ä–æ–º–∫–æ–µ –¥–µ–ª–æ"
    test_description = "–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –≥—Ä–æ–º–∫–∏—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π"

    try:
        synonyms = await llm_service.suggest_synonyms(test_title, test_description)
        if synonyms:
            print(f"‚úÖ –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è '{test_title}':")
            for i, synonym in enumerate(synonyms, 1):
                print(f"  {i}. {synonym}")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è '{test_title}'")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ollama")
    print("=" * 50)

    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not await test_llm_connection():
        print("\n‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:")
        print("  1. Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        print("  2. –ê–¥—Ä–µ—Å http://host.docker.internal:11434 –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("  3. –í Ollama –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å")
        return False

    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
    models = await test_available_models()
    if not models:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ Ollama:")
        print("  ollama pull llama2")
        print("  ollama pull mistral")
        return False

    # –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    tests = [
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", test_extract_game_info),
        ("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π", test_normalize_title),
        ("–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π", test_categorize_event),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤", test_suggest_synonyms)
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        try:
            if await test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: {passed}/{total} –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return False


if __name__ == "__main__":
    asyncio.run(run_all_tests())